{"version":3,"file":"static/js/115.c45846c9.chunk.js","mappings":"sMA4DA,UAtDe,WACb,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACAC,QAAQC,IAAIR,GACZO,QAAQC,IAAIV,IACZW,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRT,EAAK,UAAGK,EAAaK,IAAI,gBAApB,QAAgC,IAC3CC,EAAAA,EAAAA,IAAmBX,GAAOY,MAAK,SAAAC,GAAI,OAAId,EAAUc,EAAd,GACpC,GAAE,CAACR,EAAcL,IAYlB,OACE,4BACE,kBAAMc,SAZW,SAAAC,GACnBA,EAAEC,iBAEFV,EAA0B,KAAVN,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAC7C,EAQG,WACE,kBAAOiB,KAAK,OAAOC,MAAOlB,EAAOmB,SAPb,SAAAC,GACxBnB,EAASmB,EAAIC,OAAOH,MACrB,KAMK,2CAGF,wBACGpB,EAAOwB,KAAI,SAAAC,GACV,OACE,2BACE,gBACEC,IAAG,yCAAoCD,EAAKE,eAC5CC,IAAI,MAEN,UAAC,KAAD,CAAMC,GAAE,UAAKJ,EAAKK,IAAMC,MAAO,CAAEC,KAAM5B,GAAvC,UACGqB,EAAKQ,MAAO,SANRR,EAAKK,GAUjB,OAEH,SAAC,KAAD,MAQL,C,+LC1DKI,EAAG,mCAEHC,EAAS,wCAOFC,EAAe,mCAAG,WAAMC,GAAN,kFACvBC,EADuB,UARb,iDAQa,gBACc,EADd,oBAC4BJ,GAD5B,kBAGJK,EAAAA,EAAAA,IAAA,UAAaD,IAHT,cAGrBE,EAHqB,OAIrBC,EAAQD,EAASE,KAAKC,QAJD,kBAMpBF,GANoB,gCAQ3BhC,QAAQC,IAAI,KAAMkC,SARS,yDAAH,sDAYf/B,EAAkB,mCAAG,WAAMX,GAAN,kFAC1BoC,EAD0B,UAjBb,8CAiBa,oBACUJ,EADV,kBACuBhC,EADvB,kCAGPqC,EAAAA,EAAAA,IAAA,UAAaD,IAHN,cAGxBE,EAHwB,OAIxBK,EAAOL,EAASE,KAAKC,QAJG,kBAMvBE,GANuB,gCAQ9BpC,QAAQC,IAAI,KAAMkC,SARY,yDAAH,sDAYxB,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACCT,EADD,UACUH,GADV,OACsBY,EADtB,oBAC0Cb,EAD1C,mBAELzB,QAAQC,IAAI4B,GAFP,kBAIoBC,EAAAA,EAAAA,IAAA,UAAaD,IAJjC,cAIGE,EAJH,OAKGQ,EAAWR,EAASE,KALvB,kBAMIM,GANJ,kCAQHvC,QAAQC,IAAI,KAAMkC,SARf,iFADP/B,IAaO,IAAMoC,EAAS,mCAAG,WAAMF,GAAN,kFACjBT,EADiB,gBAvCT,yCAuCS,OAENS,EAFM,4BAEsBb,EAFtB,qCAIEK,EAAAA,EAAAA,IAAA,UAAaD,IAJf,cAIfE,EAJe,OAKfU,EAAmBV,EAASE,KAAKS,KALlB,kBAMdD,GANc,yFAAH,sDAYTE,EAAc,mCAAG,WAAML,GAAN,kFACtBT,EADsB,oBAjDb,uCAiDa,OAENS,EAFM,4BAEsBb,EAFtB,6CAKHK,EAAAA,EAAAA,IAAA,UAAaD,IALV,cAKpBE,EALoB,OAMpBa,EAAcb,EAASE,KAAKC,QANR,kBAOnBU,GAPmB,gCAU1B5C,QAAQC,IAAI,KAAMkC,SAVQ,yDAAH,qD","sources":["components/Movies/Movies.jsx","components/Server/Server.js"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport { GetFetchFilmByName } from 'components/Server/Server';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Routes } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  console.log(query);\n  console.log(movies);\n  useEffect(() => {\n    const query = searchParams.get('query') ?? '';\n    GetFetchFilmByName(query).then(movi => setMovies(movi));\n  }, [searchParams, query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setSearchParams(query !== '' ? { query } : {});\n  };\n\n  const updateQueryString = evt => {\n    setQuery(evt.target.value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={query} onChange={updateQueryString} />\n        <button>Search</button>\n      </form>\n\n      <ul>\n        {movies.map(film => {\n          return (\n            <li key={film.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${film.backdrop_path}`}\n                alt=\"\"\n              />\n              <Link to={`${film.id}`} state={{ from: location }}>\n                {film.title}{' '}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n      <Routes>\n        {/* <Route path=\"/movies/:movieId\" element={<MovieDetails />}> */}\n        {/* <Route path=\"/cast\" element={<Cast />} />\n          <Route path=\"/reviews\" element={<Reviews />} /> */}\n        {/* </Route> */}\n      </Routes>\n    </div>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst KEY = `465b4aa22561626299c60e60f8601e8f`;\nconst URL_TRENDING = `https://api.themoviedb.org/3/trending/all/day?`;\nconst URL_MOVIE = `\nhttps://api.themoviedb.org/3/movie/`;\nconst URL_FETCHBYNAME = `\nhttps://api.themoviedb.org/3/search/movie`;\nconst URL_ACTORS = `\nhttps://api.themoviedb.org/3/movie/`;\nconst URL_WATCHES = `https://api.themoviedb.org/3/movie/`;\nexport const GetFilmTrending = async page => {\n  const url = `${URL_TRENDING}page=${(page = 1)}&api_key=${KEY}`;\n  try {\n    const response = await axios.get(`${url}`);\n    const movie = response.data.results;\n    // console.log(movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const GetFetchFilmByName = async query => {\n  const url = `${URL_FETCHBYNAME}?api_key=${KEY}&query=${query}&language=en`;\n  try {\n    const response = await axios.get(`${url}`);\n    const name = response.data.results;\n    // console.log(name);\n    return name;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nGetFetchFilmByName();\nexport async function GetFilmInfo(movie_id) {\n  const url = `${URL_MOVIE}${movie_id}?api_key=${KEY}&language=en-US`;\n  console.log(url);\n  try {\n    const response = await axios.get(`${url}`);\n    const nameById = response.data;\n    return nameById;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport const GetActors = async movie_id => {\n  const url = `\n    ${URL_ACTORS}${movie_id}/credits?api_key=${KEY}&language=en-US`;\n  try {\n    const response = await axios.get(`${url}`);\n    const SearchActorsById = response.data.cast;\n    return SearchActorsById;\n  } catch (error) {\n    // console.log(error.message);\n  }\n};\n\nexport const GetFilmWatches = async movie_id => {\n  const url = `\n        ${URL_WATCHES}${movie_id}/reviews?api_key=${KEY}&language=en-US\n      `;\n  try {\n    const response = await axios.get(`${url}`);\n    const watchesFilm = response.data.results;\n    return watchesFilm;\n    // console.log(watchesFilm);\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["useState","movies","setMovies","query","setQuery","location","useLocation","useSearchParams","searchParams","setSearchParams","console","log","useEffect","get","GetFetchFilmByName","then","movi","onSubmit","e","preventDefault","type","value","onChange","evt","target","map","film","src","backdrop_path","alt","to","id","state","from","title","KEY","URL_MOVIE","GetFilmTrending","page","url","axios","response","movie","data","results","message","name","GetFilmInfo","movie_id","nameById","GetActors","SearchActorsById","cast","GetFilmWatches","watchesFilm"],"sourceRoot":""}