{"version":3,"file":"static/js/947.5a125556.chunk.js","mappings":"sMAyDA,UA/CqB,WAAO,IAAD,MACnBA,GAAKC,EAAAA,EAAAA,MACX,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAIxD,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYZ,EAAGa,SAASC,MAAK,SAAAC,GAAI,OAAIX,EAAgBW,EAApB,GAClC,GAAE,CAACf,EAAGa,WAEL,4BACE,SAAC,KAAD,CAAMG,GAAIT,EAAiBU,QAA3B,6CACA,2BACE,yBACE,gBACEC,IAAG,yCAAoCf,EAAagB,aACpDC,IAAG,UAAKjB,EAAakB,qBAGzB,yBACE,0BAAOlB,EAAamB,WAEtB,yBACE,oBAEF,sCAEE,0BAAOnB,EAAaoB,eAEtB,oCAEE,oCAAOpB,EAAaqB,cAApB,aAAO,EAAqBC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,MAFtC,WAKF,2BACE,yBACE,SAAC,KAAD,CAASX,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,SAAC,EAAAY,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,+LCvDKC,EAAG,mCAEHC,EAAS,wCAOFC,EAAe,mCAAG,WAAMC,GAAN,kFACvBC,EADuB,UARb,iDAQa,gBACc,EADd,oBAC4BJ,GAD5B,kBAGJK,EAAAA,EAAAA,IAAA,UAAaD,IAHT,cAGrBE,EAHqB,OAIrBC,EAAQD,EAASE,KAAKC,QAJD,kBAMpBF,GANoB,gCAQ3BG,QAAQC,IAAI,KAAMC,SARS,yDAAH,sDAYfC,EAAkB,mCAAG,WAAMC,GAAN,kFAC1BV,EAD0B,UAjBb,8CAiBa,oBACUJ,EADV,kBACuBc,EADvB,kCAGPT,EAAAA,EAAAA,IAAA,UAAaD,IAHN,cAGxBE,EAHwB,OAIxBT,EAAOS,EAASE,KAAKC,QAJG,kBAMvBZ,GANuB,gCAQ9Ba,QAAQC,IAAI,KAAMC,SARY,yDAAH,sDAYxB,SAAe9B,EAAtB,+CAAO,OAAP,oBAAO,WAA2BiC,GAA3B,kFACCX,EADD,UACUH,GADV,OACsBc,EADtB,oBAC0Cf,EAD1C,mBAELU,QAAQC,IAAIP,GAFP,kBAIoBC,EAAAA,EAAAA,IAAA,UAAaD,IAJjC,cAIGE,EAJH,OAKGU,EAAWV,EAASE,KALvB,kBAMIQ,GANJ,kCAQHN,QAAQC,IAAI,KAAMC,SARf,iFADPC,IAaO,IAAMI,EAAS,mCAAG,WAAMF,GAAN,kFACjBX,EADiB,gBAvCT,yCAuCS,OAENW,EAFM,4BAEsBf,EAFtB,qCAIEK,EAAAA,EAAAA,IAAA,UAAaD,IAJf,cAIfE,EAJe,OAKfY,EAAmBZ,EAASE,KAAKW,KALlB,kBAMdD,GANc,yFAAH,sDAYTE,EAAc,mCAAG,WAAML,GAAN,kFACtBX,EADsB,oBAjDb,uCAiDa,OAENW,EAFM,4BAEsBf,EAFtB,6CAKHK,EAAAA,EAAAA,IAAA,UAAaD,IALV,cAKpBE,EALoB,OAMpBe,EAAcf,EAASE,KAAKC,QANR,kBAOnBY,GAPmB,gCAU1BX,QAAQC,IAAI,KAAMC,SAVQ,yDAAH,qD","sources":["components/MovieDetails/MovieDetails.jsx","components/Server/Server.js"],"sourcesContent":["import { GetFilmInfo } from 'components/Server/Server';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport {\n  NavLink,\n  useParams,\n  useLocation,\n  Link,\n  Outlet,\n} from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const id = useParams(); // get id from the route params\n  const [informations, setInformations] = useState({});\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  useEffect(() => {\n    GetFilmInfo(id.movieId).then(info => setInformations(info));\n  }, [id.movieId]);\n  return (\n    <div>\n      <Link to={backLinkLocation.current}>Назад</Link>\n      <ul>\n        <li>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${informations.poster_path}`}\n            alt={`${informations.original_title}`}\n          />\n        </li>\n        <li>\n          <span>{informations.title}</span>\n        </li>\n        <li>\n          <p></p>\n        </li>\n        <li>\n          Overview\n          <span>{informations.overview}</span>\n        </li>\n        <li>\n          Genres\n          <span>{informations.genres?.map(item => item.name)}</span>;\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\nexport default MovieDetails;\n","import axios from 'axios';\nconst KEY = `465b4aa22561626299c60e60f8601e8f`;\nconst URL_TRENDING = `https://api.themoviedb.org/3/trending/all/day?`;\nconst URL_MOVIE = `\nhttps://api.themoviedb.org/3/movie/`;\nconst URL_FETCHBYNAME = `\nhttps://api.themoviedb.org/3/search/movie`;\nconst URL_ACTORS = `\nhttps://api.themoviedb.org/3/movie/`;\nconst URL_WATCHES = `https://api.themoviedb.org/3/movie/`;\nexport const GetFilmTrending = async page => {\n  const url = `${URL_TRENDING}page=${(page = 1)}&api_key=${KEY}`;\n  try {\n    const response = await axios.get(`${url}`);\n    const movie = response.data.results;\n    // console.log(movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const GetFetchFilmByName = async query => {\n  const url = `${URL_FETCHBYNAME}?api_key=${KEY}&query=${query}&language=en`;\n  try {\n    const response = await axios.get(`${url}`);\n    const name = response.data.results;\n    // console.log(name);\n    return name;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nGetFetchFilmByName();\nexport async function GetFilmInfo(movie_id) {\n  const url = `${URL_MOVIE}${movie_id}?api_key=${KEY}&language=en-US`;\n  console.log(url);\n  try {\n    const response = await axios.get(`${url}`);\n    const nameById = response.data;\n    return nameById;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport const GetActors = async movie_id => {\n  const url = `\n    ${URL_ACTORS}${movie_id}/credits?api_key=${KEY}&language=en-US`;\n  try {\n    const response = await axios.get(`${url}`);\n    const SearchActorsById = response.data.cast;\n    return SearchActorsById;\n  } catch (error) {\n    // console.log(error.message);\n  }\n};\n\nexport const GetFilmWatches = async movie_id => {\n  const url = `\n        ${URL_WATCHES}${movie_id}/reviews?api_key=${KEY}&language=en-US\n      `;\n  try {\n    const response = await axios.get(`${url}`);\n    const watchesFilm = response.data.results;\n    return watchesFilm;\n    // console.log(watchesFilm);\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["id","useParams","useState","informations","setInformations","location","useLocation","backLinkLocation","useRef","state","from","useEffect","GetFilmInfo","movieId","then","info","to","current","src","poster_path","alt","original_title","title","overview","genres","map","item","name","Suspense","fallback","KEY","URL_MOVIE","GetFilmTrending","page","url","axios","response","movie","data","results","console","log","message","GetFetchFilmByName","query","movie_id","nameById","GetActors","SearchActorsById","cast","GetFilmWatches","watchesFilm"],"sourceRoot":""}